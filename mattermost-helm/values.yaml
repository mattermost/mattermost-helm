global:
  siteUrl: "http://mattermost.example.com"
  siteName: "Mattermost"
  mattermostLicense: "THIS STRING SHOULD BE REPLACED WITH THE CONTENTS OF YOUR LICENSE FILE"

  # Settings for general configuration of MM
  # For more details: https://docs.mattermost.com/administration/config-settings.html
  enableTeamCreation: true
  enableUserCreation: true
  enableOpenServer: true
  enableLinkPreviews: false
  enableCustomEmoji: false

  # Settings to enable email notifications
  sendEmailNotifications: false
  requireEmailVerification: false
  feedbackName: ""
  feedbackEmail: "test@example.com"
  feedbackOrganization: ""
  smtpUsername: ""
  smtpPassword: ""
  smtpServer: ""
  smtpPort: ""
  # empty, TLS, or STARTTLS
  connectionSecurity: ""

  features:
    database:
      # If use the internal DB please set the user/pass in the MYSQLHA Section
      useInternal: true
      external:
        driver: "mysql"
        dataSource: ""
        dataSourceReplicas:
    elasticsearch:
      enabled: false
    loadTest:
      enabled: false
      image:
        repository: mattermost/mattermost-loadtest
        tag: latest
        pullPolicy: Always
      replicaCount: 1
      numTeams: 1
      numChannelsPerTeam: 400
      numUsers: 5
      numPosts: 200
      numEmoji: 2000
      replyChance: 0.3
      skipBulkLoad: false
      testLengthMinutes: 2
      numActiveEntities: 5
      actionRateMilliseconds: 60000
      actionRateMaxVarianceMilliseconds: 15000
      linkPreviewChance: 0.2
      customEmojiChance: 0.2
      pprofDelayMinutes: 15
      pprofLengthSeconds: 240
      sendReportToMMServer: false
      resultsServerUrl: ""
      resultsChannelId: ""
      resultsUsername: ""
      resultsPassword: ""
    grafana:
      enabled: false
    jobserver:
      name: jobserver
      enabled: true
      replicaCount: 1
      service:
        name: mattermost-app-jobserver
        type: ClusterIP
    notifications:
      # Push proxy must be configured or useHPNS must be true for push noticiations to work.
      push:
        enabled: false
        # Hosted push notification service. Requires an enterprise license.
        # More details at https://docs.mattermost.com/mobile/mobile-hpns.html.
        useHPNS: false

mattermostApp:
  replicaCount: 2
  image:
    repository: mattermost/mattermost-enterprise-edition
    tag: 5.2.1
    pullPolicy: Always

  service:
    name: mattermost-app
    type: ClusterIP
    externalPort: 8065
    internalPort: 8065
    metricsPort: 8067
    clusterPort: 8075
    gossipPort: 8074
    metricsName: mattermost-app-metrics

  ingress:
    enabled: true
    # Used to create Ingress record (should used with service.type: ClusterIP).
    hosts:
      - mattermost.example.com
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: chart-example-tls
      #   hosts:
      #     - mattermost.example.com

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 300Mi
    # requests:
    #   cpu: 100m
    #   memory: 300Mi
  persistence:
    pluginsServer:
        enabled: true
        size: 10Gi
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
        ##   Azure, standard on GKE, AWS & OpenStack)
        ##
        # storageClass: "-"
        accessModes:
        - ReadWriteOnce
        annotations: {}
    pluginsClient:
        enabled: true
        size: 10Gi
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
        ##   Azure, standard on GKE, AWS & OpenStack)
        ##
        # storageClass: "-"
        accessModes:
        - ReadWriteOnce
        annotations: {}
    configApp:
        enabled: true
        size: 1Gi
        ## If defined, storageClassName: <storageClass>
        ## If set to "-", storageClassName: "", which disables dynamic provisioning
        ## If undefined (the default) or set to null, no storageClassName spec is
        ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
        ##   Azure, standard on GKE, AWS & OpenStack)
        ##
        # storageClass: "-"
        accessModes:
        - ReadWriteOnce
        annotations: {}

mysqlha:
  enabled: true
  mysqlha:
    replicaCount: 2
    mysqlRootPassword: "rootpasswd"
    mysqlUser: "mmuser"
    mysqlPassword: "passwd"
    mysqlDatabase: "mattermost"
    configFiles:
      master.cnf: |
        [mysqld]
        log-bin
        skip_name_resolve
        max_connections = 300
      slave.cnf: |
        [mysqld]
        super-read-only
        skip_name_resolve
        slave_parallel_workers = 100
        slave_parallel_type = LOGICAL_CLOCK
        max_connections = 300
  persistence:
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
    ##   Azure, standard on GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    ## See: https://github.com/kubernetes/charts/tree/master/incubator/mysqlha
    enabled: true
    size: 10Gi

mattermost-elasticsearch:
  client:
    replicaCount: 2
  master:
    replicaCount: 3
  data:
    replicaCount: 2

mattermost-push-proxy:
  replicaCount: 1
  applePushSettings:
    apple:
      configMap: "apple-cert-path"
      privateCert: ""
      privateCertPassword: ""
      pushTopic: "com.mattermost.Mattermost"
    apple_rn:
      configMap: "apple-rn-cert-path"
      privateCert: ""
      privateCertPassword: ""
      pushTopic: "com.mattermost.react.native"
    apple_rnbeta:
      configMap: "apple-rnbeta-cert-path"
      privateCert: ""
      privateCertPassword: ""
      pushTopic: ""
  androidPushSettings:
    android:
      apiKey: ""
    android_rn:
      apiKey: ""

minio:
  enabled: true
  image:
    repository: minio/minio
    tag: RELEASE.2018-07-10T01-42-11Z
    pullPolicy: IfNotPresent
  accessKey: "mattermostadmin"
  secretKey: "mattermostadmin"

  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## minio data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    storageClass:
    accessMode: ReadWriteOnce
    size: 10Gi
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
  defaultBucket:
    enabled: true
    name: bucket
    policy: none
    purge: false

  ## https://docs.minio.io/docs/minio-bucket-notification-guide
  ## https://github.com/minio/minio/blob/master/docs/config
  # minioConfig:

# See https://github.com/kubernetes/charts/tree/master/stable/prometheus#configuration
# for more configuration options
prometheus:
  install: false
  rbac:
    create: true
  alertmanager:
    enabled: false
  alertmanagerFiles:
    alertmanager.yml: {}
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
