global:
  siteUrl: "http://mattermost.example.com"  # REQUIRED SETTING, PLEASE UPDATE
  mattermostLicense: "THIS STRING SHOULD BE REPLACED WITH THE CONTENTS OF YOUR LICENSE FILE"  # REQUIRED SETTING, PLEASE UPDATE

  # Settings for configuration of Mattermost
  # For more details: https://docs.mattermost.com/administration/config-settings.html
  siteName: "Mattermost"
  enableTeamCreation: true
  enableUserCreation: true
  enableOpenServer: true
  enableLinkPreviews: true
  enableCustomEmoji: true

  # Settings to enable email notifications
  sendEmailNotifications: false
  requireEmailVerification: false
  feedbackName: ""
  feedbackEmail: "test@example.com"
  feedbackOrganization: ""
  smtpUsername: ""
  smtpPassword: ""
  smtpServer: ""
  smtpPort: ""
  connectionSecurity: ""  # empty, TLS, or STARTTLS

  features:
    database:
      # If using an internal DB, update the passwords in the "mysqlha" section
      # If using an external DB, disable the MySQL deployment in the "mysqlha" section
      useInternal: true
      external:
        driver: "mysql"
        dataSource: ""
        dataSourceReplicas:
    elasticsearch:
      enabled: false
    grafana:
      enabled: false
    jobserver:
      name: jobserver
      enabled: true
      replicaCount: 1
      strategy:
        type: Recreate
        rollingUpdate: null
      revisionHistoryLimit: 2
      service:
        name: mattermost-app-jobserver
        type: ClusterIP
      # jobserver Node selector
      # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      nodeSelector: {}
      # jobserver Affinity
      # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}
      # jobserver Tolerations for pod assignment
      # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []
    notifications:
      # Push proxy must be configured or useHPNS must be true for push noticiations to work.
      push:
        enabled: true
        # Hosted push notification service. Requires an enterprise license.
        # More details at https://docs.mattermost.com/mobile/mobile-hpns.html.
        useHPNS: true
    loadTest:
      enabled: false
      image:
        repository: mattermost/mattermost-loadtest
        tag: latest
        pullPolicy: Always
      replicaCount: 1
      strategy:
        type: Recreate
        rollingUpdate: null
      revisionHistoryLimit: 2
      numTeams: 1
      numChannelsPerTeam: 400
      numUsers: 5
      numPosts: 200
      numEmoji: 2000
      replyChance: 0.3
      skipBulkLoad: false
      testLengthMinutes: 2
      numActiveEntities: 5
      actionRateMilliseconds: 60000
      actionRateMaxVarianceMilliseconds: 15000
      linkPreviewChance: 0.2
      customEmojiChance: 0.2
      pprofDelayMinutes: 15
      pprofLengthSeconds: 240
      sendReportToMMServer: false
      resultsServerUrl: ""
      resultsChannelId: ""
      resultsUsername: ""
      resultsPassword: ""
      # loadTest Node selector
      # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      nodeSelector: {}
      # loadTest Affinity
      # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      affinity: {}
      # loadTest Tolerations for pod assignment
      # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      tolerations: []

initContainerImage:
  repository: appropriate/curl
  tag: latest
  imagePullPolicy: IfNotPresent

# Mattermost deployment section.
# Use to configure the deploymento the Mattermost app servers.
mattermostApp:
  replicaCount: 2
  image:
    repository: mattermost/mattermost-enterprise-edition
    tag: 5.29.0
    pullPolicy: IfNotPresent

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 2

  service:
    name: mattermost-app
    type: ClusterIP
    externalPort: 8065
    internalPort: 8065
    metricsPort: 8067
    clusterPort: 8075
    gossipPort: 8074
    metricsName: mattermost-app-metrics

  ingress:
    # Used to create Ingress record (should be used with service.type: ClusterIP).
    enabled: false
    hosts:
      - mattermost.example.com
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: chart-example-tls
      #   hosts:
      #     - mattermost.example.com
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # nginx.ingress.kubernetes.io/proxy-buffering: "on"
      # nginx.ingress.kubernetes.io/proxy-body-size: 50m
      # nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      # nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      # nginx.ingress.kubernetes.io/configuration-snippet: |
      #   proxy_cache mattermost_cache;
      #   proxy_cache_revalidate on;
      #   proxy_cache_min_uses 2;
      #   proxy_cache_use_stale timeout;
      #   proxy_cache_lock on;

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetMemoryUtilizationPercentage: 50
    targetCPUUtilizationPercentage: 50

  # mattermostApp Node selector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}

  # mattermostApp Affinity
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}

  # mattermostApp Tolerations for pod assignment
  # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 300Mi
    # requests:
    #   cpu: 100m
    #   memory: 300Mi

  extraInitContainers: []
    # Extra Container to donwload and install plugins
    # - name: init-plugins-config
    #   image: busybox
    #   imagePullPolicy: IfNotPresent
    #   command:
    #     - sh
    #     - "-c"
    #     - |
    #       PLUGINS_TAR="hovercardexample.tar.gz"
    #       PLUGINS_TAR="${PLUGINS_TAR} https://<YOUR_PATH_TO_DOWNLOAD_PLUGINS_1>"
    #       PLUGINS_TAR="${PLUGINS_TAR} https://<YOUR_PATH_TO_DOWNLOAD_PLUGINS_2>"
    #       PLUGINS_TAR="${PLUGINS_TAR} https://<YOUR_PATH_TO_DOWNLOAD_PLUGINS_N>"

    #       for plugin_tar in ${PLUGINS_TAR};
    #       do
    #         wget ${plugin_tar} -P /mattermost/plugins
    #         cd /mattermost/plugins
    #         tar -xzvf ${plugin_tar##*/}
    #         rm -f ${plugin_tar##*/}
    #       done
    #   volumeMounts:
    #   # Need to match the volume mount for plugins volumes
    #   - name: mattermost-plugins
    #     mountPath: /mattermost/plugins/
    #   - name: mattermost-plugins-client
    #     mountPath: /mattermost/client/plugins/
    #   Add the extra volumes you might want to use here. Use the values you define in the extraVolumeMounts

  # Add additional volumes and mounts, for example to add SAML keys in the app or other files the app server may need to access
  extraVolumes: []
    # - hostPath:
    #     path: /var/log
    #   name: varlog
  extraVolumeMounts: []
    # - name: varlog
    #   mountPath: /host/var/log
    #   readOnly: true
  ## Allows the specification of additional environment variables for Mattermost
  extraEnv: []
    # See more environments variables that you can set here: https://docs.mattermost.com/administration/config-settings.html#configuration-settings
    # for example
    # - name: MM_SERVICESETTINGS_ENABLEMULTIFACTORAUTHENTICATION
    #   value: "true"
    # - name: MM_SERVICESETTINGS_ENABLECUSTOMEMOJI
    #   value: "true"
  ## Additional pod annotations
  extraPodAnnotations: {}
# MySQL HA Section. Use this to configure MySQL.
# If you are using an external DB, disable this.
mysqlha:
  enabled: true
  mysqlha:
    replicaCount: 2
    # Please update the root and regular passwords
    mysqlRootPassword: "rootpasswd"
    mysqlUser: "mmuser"
    mysqlPassword: "passwd"
    mysqlDatabase: "mattermost"
    configFiles:
      master.cnf: |
        [mysqld]
        log-bin
        skip_name_resolve
        max_connections = 300
      slave.cnf: |
        [mysqld]
        super-read-only
        skip_name_resolve
        slave_parallel_workers = 100
        slave_parallel_type = LOGICAL_CLOCK
        max_connections = 300
  persistence:
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, azure-disk on
    ##   Azure, standard on GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    ## See: https://github.com/kubernetes/charts/tree/master/incubator/mysqlha
    enabled: true
    size: 10Gi

mattermost-elasticsearch:
  client:
    replicaCount: 2
  master:
    replicaCount: 3
  data:
    replicaCount: 2

# Minio Section. Use this to configure Minio storage.
# If you want to use external storage, disable this.
minio:
  enabled: true
  image:
    repository: minio/minio
    tag: RELEASE.2019-05-14T23-57-45Z
    pullPolicy: IfNotPresent
  accessKey: "mattermostadmin"
  secretKey: "mattermostadmin"

  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## minio data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    ## Storage class of PV to bind. By default it looks for standard storage class.
    ## If the PV uses a different storage class, specify that here.
    storageClass:
    accessMode: ReadWriteOnce
    size: 10Gi
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
  defaultBucket:
    enabled: true
    name: bucket
    policy: none
    purge: false

  ## https://docs.minio.io/docs/minio-bucket-notification-guide
  ## https://github.com/minio/minio/blob/master/docs/config
  # minioConfig:

# See https://github.com/kubernetes/charts/tree/master/stable/prometheus#configuration
# for more configuration options
prometheus:
  install: false
  rbac:
    create: true
  alertmanager:
    enabled: false
  alertmanagerFiles:
    alertmanager.yml: {}
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false

serviceAccount:
  create: false
  name:
  annotations: {}
