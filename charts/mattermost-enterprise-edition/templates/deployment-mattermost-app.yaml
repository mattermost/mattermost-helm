apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mattermost-enterprise-edition.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "mattermost-enterprise-edition.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: server
    helm.sh/chart:  {{ include "mattermost-enterprise-edition.chart" . }}
spec:
  replicas: {{ .Values.mattermostApp.replicaCount }}
  {{- with .Values.mattermostApp.strategy }}
  strategy:
    {{- . | toYaml | nindent 4 }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.mattermostApp.revisionHistoryLimit }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mattermost-enterprise-edition.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/component: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mattermost-enterprise-edition.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/component: server
        helm.sh/chart: {{ include "mattermost-enterprise-edition.chart" . }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-mattermost-config.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.mattermostApp.service.metricsPort }}"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      {{- if .Values.global.features.elasticsearch.enabled }}
      - name: init-elasticsearch
        image: appropriate/curl:latest
        imagePullPolicy: IfNotPresent
        command: [
          "sh",
          "-c",
          "until curl --max-time 5 http://{{ .Release.Name }}-mattermost-elasticsearch:9200 ; do echo waiting for elasticsearch; sleep 5; done; echo init-elasticsearch finished"]
      {{- end }}
      {{- if .Values.global.features.database.useInternal }}
      - name: init-mysql
        image: appropriate/curl:latest
        imagePullPolicy: IfNotPresent
        command: [
          "sh",
          "-c",
          "until curl --max-time 5 http://{{ .Release.Name }}-mysqlha-readonly:3306; do echo waiting for {{ .Release.Name }}-mysqlha; sleep 5; done;"]
       {{- end }}
      - name: init-config
        image: busybox
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - "-c"
          - |
            set -ex
            rm -rfv /mattermost/config/lost+found
            cp /tmp/config/config.json /mattermost/config/config.json
        volumeMounts:
        - mountPath: /tmp/config/config.json
          name: mattermost-init-config-json
          subPath: config.json
        - mountPath: /mattermost/config/
          name: mattermost-config
      {{- if .Values.mattermostApp.extraInitContainers }}
      {{- .Values.mattermostApp.extraInitContainers | toYaml | nindent 6 }}
      {{- end }}
      containers:
      - name: {{ include "mattermost-enterprise-edition.name" . }}
        image: "{{ .Values.mattermostApp.image.repository }}:{{ .Values.mattermostApp.image.tag }}"
        imagePullPolicy: {{ .Values.mattermostApp.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.mattermostApp.service.internalPort }}
          name: api
        - containerPort: {{ .Values.mattermostApp.service.metricsPort }}
          name: metrics
        - containerPort: {{ .Values.mattermostApp.service.clusterPort }}
          name: cluster
        - containerPort: {{ .Values.mattermostApp.service.gossipPort }}
          name: gossip
        livenessProbe:
          initialDelaySeconds: 90
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /api/v4/system/ping
            port: {{ .Values.mattermostApp.service.internalPort }}
        readinessProbe:
          initialDelaySeconds: 15
          timeoutSeconds: 5
          periodSeconds: 15
          httpGet:
            path: /api/v4/system/ping
            port: {{ .Values.mattermostApp.service.internalPort }}
        volumeMounts:
        - mountPath: /mattermost/mattermost.mattermost-license
          name: mattermost-license
          subPath: mattermost.mattermost-license
        - mountPath: /mattermost/plugins/
          name: mattermost-plugins
        - mountPath: /mattermost/client/plugins/
          name: mattermost-plugins-client
        - mountPath: /mattermost/config/
          name: mattermost-config
{{- if .Values.mattermostApp.extraVolumeMounts }}
{{ toYaml .Values.mattermostApp.extraVolumeMounts | indent 8 }}
{{- end }}
        resources:
{{ toYaml .Values.mattermostApp.resources | indent 10 }}
      volumes:
      - name: mattermost-init-config-json
        configMap:
          name: {{ include "mattermost-enterprise-edition.fullname" . }}-init-config-json
          items:
          - key: config.json
            path: config.json
      - name: mattermost-plugins
        emptyDir: {}
      - name: mattermost-plugins-client
        emptyDir: {}
      - name: mattermost-config
        emptyDir: {}
      - name: mattermost-license
        secret:
          secretName: {{ include "mattermost-enterprise-edition.fullname" . }}-mattermost-license
{{- if .Values.mattermostApp.extraVolumes }}
{{ toYaml .Values.mattermostApp.extraVolumes | indent 6 }}
{{- end }}
